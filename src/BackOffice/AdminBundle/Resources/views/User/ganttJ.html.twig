<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"
type="text/javascript"></script>
<script src="//code.highcharts.com/4.0.1/highcharts.js"></script>
<script src="//code.highcharts.com/4.0.1/modules/exporting.js"></script>
<script type="text/javascript">
$(function () {

    /**
     * Highcharts X-range series plugin
     */
    (function (H) {
         H.wrap(H.Tooltip.prototype, 'hide', function () {
         
         });
         
        var defaultPlotOptions = H.getOptions().plotOptions,
            columnType = H.seriesTypes.column,
            each = H.each;

        defaultPlotOptions.xrange = H.merge(defaultPlotOptions.column, {});
        H.seriesTypes.xrange = H.extendClass(columnType, {
            type: 'xrange',
            parallelArrays: ['x', 'x2', 'y'],
            animate: H.seriesTypes.line.prototype.animate,

            /**
             * Borrow the column series metrics, but with swapped axes. This gives free access
             * to features like groupPadding, grouping, pointWidth etc.
             */  
            getColumnMetrics: function () {
                var metrics,
                    chart = this.chart,
                    swapAxes = function () {
                        each(chart.series, function (s) {
                            var xAxis = s.xAxis;
                            s.xAxis = s.yAxis;
                            s.yAxis = xAxis;
                        });
                    };

                swapAxes();

                this.yAxis.closestPointRange = 1;
                metrics = columnType.prototype.getColumnMetrics.call(this);

                swapAxes();
                
                return metrics;
            },
            translate: function () {
                columnType.prototype.translate.apply(this, arguments);
                var series = this,
                    xAxis = series.xAxis,
                    yAxis = series.yAxis,
                    metrics = series.columnMetrics;

                H.each(series.points, function (point) {
                    barWidth = xAxis.translate(H.pick(point.x2, point.x + (point.len || 0))) - point.plotX;
                    point.shapeArgs = {
                        x: point.plotX,
                        y: point.plotY + metrics.offset,
                        width: barWidth,
                        height: metrics.width
                    };
                    point.tooltipPos[0] += barWidth / 2;
                    point.tooltipPos[1] -= metrics.width / 2;
                });
            }
        });

        /**
         * Max x2 should be considered in xAxis extremes
         */
        H.wrap(H.Axis.prototype, 'getSeriesExtremes', function (proceed) {
            var axis = this,
                dataMax = Number.MIN_VALUE;

            proceed.call(this);
            if (this.isXAxis) {
                each(this.series, function (series) {
                    each(series.x2Data || [], function (val) {
                        if (val > dataMax) {
                            dataMax = val;
                           
                        }
                    });
                });
                if (dataMax > Number.MIN_VALUE) {
                    axis.dataMax = dataMax;
                }
            }                
        });
    }(Highcharts));
    

    $('#container').highcharts({
        chart: {
            type: 'xrange'
            
        },
        title: {
            text: 'Planning des travaux pour le projet {{projet.id}}'
        },
        xAxis: {
            type: 'integer',
            
            dateTimeLabelFormats: { // don't display the dummy year
                month: '%e. %b',
                year: '%Y'
            }
        },
        yAxis: {
            title: '',
            categories: [
               {% for Plan in plan %}
                             {% if not loop.last%}
                    '{{Plan.item}}',
                         {% else %}   
                             '{{Plan.item}}'
                             {% endif %} 
                          {% endfor %} 
                
            ],
            min: 0,
            
            minPadding: 0.2,
                     
            
            
        },
        plotOptions: {
       xrange :
               {
                   dataLabels: {
    enabled: true,
    formatter: function () {
        return '<b> '+(this.point.x2-this.point.x)+' Jours </b>';
    }
        }}
        },
         tooltip: {
         
         headerFormat: '<b>Jours</b><br>',
             formatter: function() {
    return '<b>Jours</b><br>'+(this.point.x2-this.point.x);
  }
        },
          
        series: [{
            name: 'Planning ',
            // pointPadding: 0,
            // groupPadding: 0,
             // borderRadius: 5,
             pointWidth: 20,
             
            data: [
              
                   {% for Plan in plan %}
                               {% if not loop.last%}
                   {
                    x :{{Plan.jourDebut}},
                     x2 : {{Plan.jourFin}},     
                      y: {{ loop.index0 }}  
                    },  
                      {% else %} 
                    {
                    x : {{Plan.jourDebut}},
                     x2 : {{Plan.jourFin}},     
                      y: {{ loop.index0 }}
                    }       
                       {% endif %}    
                     
                   {% endfor %} 
                   ]
                
            }]
        });

   
});
</script>
<div id="container" style="min-width: 400px; height: 400px; margin: 0 auto"></div>
