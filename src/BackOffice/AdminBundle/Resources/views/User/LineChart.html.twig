<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"
type="text/javascript"></script>
<script src="//code.highcharts.com/4.0.1/highcharts.js"></script>
<script src="//code.highcharts.com/4.0.1/modules/exporting.js"></script>
<script type="text/javascript">
$(function () {

    /**
     * Highcharts X-range series plugin
     */
    (function (H) {
        var defaultPlotOptions = H.getOptions().plotOptions,
            columnType = H.seriesTypes.column,
            each = H.each;

        defaultPlotOptions.xrange = H.merge(defaultPlotOptions.column, {});
        H.seriesTypes.xrange = H.extendClass(columnType, {
            type: 'xrange',
            parallelArrays: ['x', 'x2', 'y'],
            animate: H.seriesTypes.line.prototype.animate,

            /**
             * Borrow the column series metrics, but with swapped axes. This gives free access
             * to features like groupPadding, grouping, pointWidth etc.
             */  
            getColumnMetrics: function () {
                var metrics,
                    chart = this.chart,
                    swapAxes = function () {
                        each(chart.series, function (s) {
                            var xAxis = s.xAxis;
                            s.xAxis = s.yAxis;
                            s.yAxis = xAxis;
                        });
                    };

                swapAxes();

                this.yAxis.closestPointRange = 1;
                metrics = columnType.prototype.getColumnMetrics.call(this);

                swapAxes();
                
                return metrics;
            },
            translate: function () {
                columnType.prototype.translate.apply(this, arguments);
                var series = this,
                    xAxis = series.xAxis,
                    yAxis = series.yAxis,
                    metrics = series.columnMetrics;

                H.each(series.points, function (point) {
                    barWidth = xAxis.translate(H.pick(point.x2, point.x + (point.len || 0))) - point.plotX;
                    point.shapeArgs = {
                        x: point.plotX,
                        y: point.plotY + metrics.offset,
                        width: barWidth,
                        height: metrics.width
                    };
                    point.tooltipPos[0] += barWidth / 2;
                    point.tooltipPos[1] -= metrics.width / 2;
                });
            }
        });

        /**
         * Max x2 should be considered in xAxis extremes
         */
        H.wrap(H.Axis.prototype, 'getSeriesExtremes', function (proceed) {
            var axis = this,
                dataMax = Number.MIN_VALUE;

            proceed.call(this);
            if (this.isXAxis) {
                each(this.series, function (series) {
                    each(series.x2Data || [], function (val) {
                        if (val > dataMax) {
                            dataMax = val;
                           
                        }
                    });
                });
                if (dataMax > Number.MIN_VALUE) {
                    axis.dataMax = dataMax;
                }
            }                
        });
    }(Highcharts));
    
    var d = new Date('{{plan.avisKickoff|date("Y-m-d")}}');
    
    var preavis =  {{plan.preavis}};
    var datePreavis = new Date(d);
    datePreavis.setDate(d.getDate()+preavis);
    
    var retraitTole = {{plan.retraitTole}};
    var dateRetraitTole = new Date(d);
    dateRetraitTole.setDate(d.getDate()+retraitTole);
    
    var retraitPlan = {{plan.retraitPlan}};
    var dateRetraitPlan = new Date(d);
    dateRetraitPlan.setDate(d.getDate()+retraitPlan);
    
    var debutInst = {{plan.debutInstallation}};
    var dateDebutInst = new Date(d);
    dateDebutInst.setDate(d.getDate()+debutInst);
    
    var debutPrefa = {{plan.debutPrefa}};
    var dateDebutPrefa = new Date(d);
    dateDebutPrefa.setDate(d.getDate()+debutPrefa);
    
    var debutMonta = {{plan.debutMonta}};
    var dateDebutMonta = new Date(d);
    dateDebutMonta.setDate(d.getDate()+debutMonta);
    
    var livraison = {{plan.livraisonCommandePrefa}};
    var dateLivraison = new Date(d);
    dateLivraison.setDate(d.getDate()+livraison);
    
    var debut1 = {{plan.debutMontagePremierGroupe}};
    var dateDebut1 = new Date(d);
    dateDebut1.setDate(d.getDate()+debut1);
    
    var debut2 = {{plan.debutMontageDeuxiemeGroupe}};
    var dateDebut2 = new Date(d);
    dateDebut2.setDate(d.getDate()+debut2);
    console.log("debut2 : "+dateDebut2);
    
    var debutDem = {{plan.debutDemobilisation}};
    var dateDebutDem = new Date(d);
    dateDebutDem.setDate(d.getDate()+debutDem);
    console.log("demo : "+dateDebutDem);
    
    var finDem = {{plan.finDemobilisation}};
    var dateFinDem = new Date(d);
    dateFinDem.setDate(d.getDate()+finDem);
    console.log("fin : "+dateFinDem);
    
    var dateFin = new Date('{{plan.dateFin|date("Y-m-d")}}');
    // THE CHART
    $('#container').highcharts({
        chart: {
            type: 'xrange'
            
        },
        title: {
            text: 'Planning des travaux pour le projet'
        },
        xAxis: {
            type: 'datetime',
            
            dateTimeLabelFormats: { // don't display the dummy year
                month: '%e. %b',
                year: '%Y'
            }
        },
        yAxis: {
            title: '',
            categories: ['Préavis d attribution', 'Kick Off meeting', 'Retrait Tole pour préfa', 'Retrait du plan des priorités', "Début d'installation sur site", 'Début de préfabrication à Bizerte', 'Début montage', 'Première livraison de préfabrication', 'Début montage avec les premières équipes', 'Début montage avec les secondes équipes', 'Début de démobilisation', 'Fin de démobilisation'],
            min: 0,
            max: 11,
            minPadding: 0.2,
                     
            
            
        },
         tooltip: {
            headerFormat: '<b>{series.name}</b><br>',
            pointFormat: '{point.x:%e. %b  %Y}'
        },
        plotOptions: {
            series: {
                grouping: false
            }
        },
          
        series: [{
            name: 'Planning ',
            // pointPadding: 0,
            // groupPadding: 0,
             // borderRadius: 5,
             pointWidth: 20,
             
            data: [{
                    
                x: datePreavis,
                x2: d,
                y: 0
            }, {
                x: d,
                x2: dateRetraitTole,
                y: 1
            }, {
                x: dateRetraitTole,
                x2: dateRetraitPlan,
                y: 2
            }, {
                x: dateRetraitPlan,
                x2: dateDebutInst,
                y: 3
            }, {
                x: dateDebutInst,
                x2: dateDebutPrefa,
                y: 4
            }, {
                x: dateDebutPrefa,
                x2: dateDebutMonta,
                y: 5
            }, {
                x: dateDebutMonta,
                x2: dateLivraison,
                y: 6
            }, {
                x: dateLivraison,
                x2: dateDebut1,
                y: 7
            }, {
                x: dateDebut1,
                x2: dateDebut2,
                y: 8
            }, {
                x: dateDebut2,
                x2: dateDebutDem,
                y: 9
            }, {
                x: dateDebutDem,
                x2: dateFinDem,
                y: 10
            }, {
                x: dateFinDem,
                x2: Date.UTC( "{{plan.dateFin|date("Y")}}", "{{plan.dateFin|date("m")}}", "{{plan.dateFin|date("d")}}") ,
                y: 11
            }]
        }]

    });
});
</script>
<div id="container" style="min-width: 700px; height: 700px; margin: 0 auto"></div>
