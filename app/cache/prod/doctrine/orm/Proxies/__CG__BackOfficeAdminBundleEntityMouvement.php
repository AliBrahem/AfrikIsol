<?php

namespace Proxies\__CG__\BackOffice\AdminBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Mouvement extends \BackOffice\AdminBundle\Entity\Mouvement implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function getDate()
    {
        $this->__load();
        return parent::getDate();
    }

    public function getNature()
    {
        $this->__load();
        return parent::getNature();
    }

    public function getUnite()
    {
        $this->__load();
        return parent::getUnite();
    }

    public function getNombre()
    {
        $this->__load();
        return parent::getNombre();
    }

    public function getQtedispo()
    {
        $this->__load();
        return parent::getQtedispo();
    }

    public function getQtedemande()
    {
        $this->__load();
        return parent::getQtedemande();
    }

    public function getQteStock()
    {
        $this->__load();
        return parent::getQteStock();
    }

    public function setId($id)
    {
        $this->__load();
        return parent::setId($id);
    }

    public function setDate(\DateTime $date)
    {
        $this->__load();
        return parent::setDate($date);
    }

    public function setNature($nature)
    {
        $this->__load();
        return parent::setNature($nature);
    }

    public function setUnite($unite)
    {
        $this->__load();
        return parent::setUnite($unite);
    }

    public function setNombre($nombre)
    {
        $this->__load();
        return parent::setNombre($nombre);
    }

    public function setQtedispo($qtedispo)
    {
        $this->__load();
        return parent::setQtedispo($qtedispo);
    }

    public function setQtedemande($qtedemande)
    {
        $this->__load();
        return parent::setQtedemande($qtedemande);
    }

    public function setQteStock($qteStock)
    {
        $this->__load();
        return parent::setQteStock($qteStock);
    }

    public function setIdstock(\BackOffice\AdminBundle\Entity\Stock $idstock = NULL)
    {
        $this->__load();
        return parent::setIdstock($idstock);
    }

    public function getIdstock()
    {
        $this->__load();
        return parent::getIdstock();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'date', 'nature', 'unite', 'nombre', 'qtedispo', 'qtedemande', 'qteStock', 'idstock');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}